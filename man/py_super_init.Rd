% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/py_super_init.R
\name{py_super_init}
\alias{py_super_init}
\title{Call Python's \verb{super().__init__()} from R}
\usage{
py_super_init(...)
}
\arguments{
\item{...}{Arguments to pass to the superclass initializer.}
}
\value{
No return; called for side effect.
}
\description{
This function mimics Python's built-in \verb{super().__init__()} method,
calling the initializer of the superclass for the current object.
It is equivalent to \code{super()$`__init__`(...)}.
}
\examples{
\dontrun{
Employee <- py_class("Employee",
                     `__init__` = function(self, name, id) {
                       self$name <- name
                       self$id <- id
                       return(py_builtins$None)
                     },
                     get_email = function(self) {
                       paste0(self$name, "_", self$id, "@company.com")
                     })

Salary <- py_class("Salary", inherit = Employee,
                   `__init__` = function(self, name, id, salary) {
                     py_super_init(name, id)
                     self$salary <- salary
                     return(py_builtins$None)
                   },
                   get_salary_summary = function(self) {
                     list(ID = self$id,
                          Name = self$name,
                          Email = self$get_email(),
                          Salary = self$salary)
                   })

mike_salary <- Salary("Mike", "1234", 1000)
mike_salary$get_salary_summary()
mike_salary$get_email()
}

}
