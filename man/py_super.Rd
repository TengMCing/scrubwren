% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/py_super.R
\name{py_super}
\alias{py_super}
\alias{py_super_init}
\title{Call Python's \code{super()} from R}
\usage{
py_super()

py_super_init(...)
}
\arguments{
\item{...}{Arguments to pass to the superclass initializer (for
\code{py_super_init()} only).}
}
\value{
\itemize{
\item \code{py_super()} returns a Python object proxy to the superclass.
\item \code{py_super_init()} returns \code{NULL} invisibly
(or \code{\link[reticulate:py_none]{reticulate::py_none()}} if \code{convert = FALSE}), called for side effects.
}
}
\description{
These functions provide access to Python's built-in \code{super()} mechanism
from within R, making it easier to work with Python class inheritance
when defining classes via \code{\link[reticulate:PyClass]{reticulate::PyClass()}} or \code{\link[=py_class]{py_class()}}.
}
\details{
\itemize{
\item \code{py_super()} returns a proxy to the superclass of the current object,
equivalent to Python's \code{super()}.
\item \code{py_super_init()} directly calls the superclass initializer,
equivalent to \verb{super().__init__(...)}.
}

While \code{reticulate} internally injects a \code{super()} reference into class
methods, this re-export makes the functionality explicit and convenient
for user code.
}
\examples{
\dontrun{
Employee <- py_class(
  "Employee",
  `__init__` = function(self, name, id) {
    self$name <- name
    self$id <- id
    return(py_builtins$None)
  },
  get_email = function(self) {
    paste0(self$name, "_", self$id, "@company.com")
  }
)

Salary <- py_class(
  "Salary", inherit = Employee,
  `__init__` = function(self, name, id, salary) {
    # Option A: use py_super()
    py_super()$`__init__`(name, id)

    # Option B: use py_super_init()
    # py_super_init(name, id)

    self$salary <- salary
    return(py_builtins$None)
  },
  get_summary = function(self) {
    list(ID = self$id,
         Name = self$name,
         Email = self$get_email(),
         Salary = self$salary)
  }
)

mike <- Salary("Mike", "1234", 1000)
mike$get_summary()
}

}
