% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/py_super.R
\name{py_super}
\alias{py_super}
\title{Call Python's \code{super()} from R}
\usage{
py_super()
}
\value{
A Python object represents a proxy to the superclass.
}
\description{
This function re-exports Python's built-in \code{super()} as used internally by \code{reticulate}.
It returns a proxy to the superclass of the current object.
}
\details{
While \code{reticulate} does not formally document this function, inspecting the source
of \code{PyClass} shows that it injects a \code{super()} function into the environment of each
class method. This re-export makes that functionality explicit and directly accessible.
}
\examples{
\dontrun{
Employee <- py_class("Employee",
                     `__init__` = function(self, name, id) {
                       self$name <- name
                       self$id <- id
                       return(py_builtins$None)
                     },
                     get_email = function(self) {
                       paste0(self$name, "_", self$id, "@company.com")
                     })

Salary <- py_class("Salary", inherit = Employee,
                   `__init__` = function(self, name, id, salary) {
                     py_super$`__init__`(name, id)
                     self$salary <- salary
                     return(py_builtins$None)
                   },
                   get_salary_summary = function(self) {
                     list(ID = self$id,
                          Name = self$name,
                          Email = self$get_email(),
                          Salary = self$salary)
                   })

mike_salary <- Salary("Mike", "1234", 1000)
mike_salary$get_salary_summary()
mike_salary$get_email()
}

}
