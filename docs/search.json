[{"path":"https://tengmcing.github.io/scrubwren/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 scrubwren authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tengmcing.github.io/scrubwren/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Weihao Li. Author, maintainer, copyright holder.","code":""},{"path":"https://tengmcing.github.io/scrubwren/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li W (2025). scrubwren: Specialized Collection Reticulate Utilities: Better Wrappers Smoother Experience. R package version 1.0.1, https://github.com/TengMCing/scrubwren/, https://tengmcing.github.io/scrubwren/.","code":"@Manual{,   title = {scrubwren: Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience},   author = {Weihao Li},   year = {2025},   note = {R package version 1.0.1, https://github.com/TengMCing/scrubwren/},   url = {https://tengmcing.github.io/scrubwren/}, }"},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"scrubwren-","dir":"","previous_headings":"","what":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"scrubwren stands Specialized Collection Reticulate Utilities: Better WRappers smoother ExperieNce. logo features White-browed Scrubwren, common bird eastern southeastern Australia. package provides set R wrappers helper functions reticulate, designed reduce friction often encounter using Python deep learning libraries R. reticulate powerful, aspects can feel unintuitive cumbersome, particularly first-time users. times, even seems easier write Python function run via system(), rather wrestling reticulate, especially feels like ’m typing far R Python achieve result. idea Python feature wrapped cleanly use R, feel free open GitHub issue. Suggestions potential implementation approach welcome, even ideas without concrete proposal appreciated.","code":""},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"can install development version scrubwren GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"TengMCing/scrubwren\")"},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"Python class definition: py_class() Turning automatic conversion /py_convert_on() / py_convert_off()","code":""},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"id_1-explictly-initialized-python-session","dir":"","previous_headings":"","what":"1. Explictly initialized Python session","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"","code":"library(scrubwren) py_init() #> ℹ Initialized Python 3.11 from '/Users/patrickli/.virtualenvs/tf/bin/python'."},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"id_1-asscesible-python-built-in-functions","dir":"","previous_headings":"","what":"1. Asscesible Python built-in functions","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"reticulate, like directly use Python built-functions like type(), need first import reticulate::import_builtins() R variable, call . According reticulate documentation, primarily difference set built-functions Python 2 3. scrubwren, built-functions loaded automatically py_builtins ready used. happens load package, don’t name conflicts problem. importing built-functions, message issued telling built-functions imported . However, set reticulate use different Python interpreter, need re-import builtin","code":"names(py_builtins)[1:5] #> [1] \"abs\"   \"aiter\" \"all\"   \"anext\" \"any\""},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"id_1-define-python-class-with-py_class","dir":"","previous_headings":"","what":"1. Define Python class with py_class()","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"reticulate, Python class definitions must provided list via defs argument PyClass. py_class(), can instead supply regular function arguments. can still specify classname character string inherit list Python objects, usual. However, PyClass allow disable automatic conversion Python objects R, means method defined class return R object whenever possible. can frustrating data analysis tasks rely object indexing, since R starts 1 Python starts 0. py_class function lets control behavior convert argument.","code":"Employee <- py_class(\"Employee\", convert = FALSE,                      `__init__` = function(self, name, id) {                        self$name <- name                        self$id <- id                        return(py_builtins$None)                      },                      get_email = function(self) {                        paste0(self$name, \"_\", self$id, \"@company.com\")                      }) Mike <- Employee(\"Mike\", \"1234\") Mike$get_email() #> 'Mike_1234@company.com' Mike$get_email() |> class() #> [1] \"python.builtin.str\"    \"python.builtin.object\""},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"id_2-turning-automatic-conversion-onoff-with-py_convert_on--py_convert_off","dir":"","previous_headings":"","what":"2. Turning automatic conversion on/off with py_convert_on() / py_convert_off()","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"py_convert_on() enables automatic conversion Python objects R, py_convert_off() disables . Note Python object must also represented R environment work, typically includes Python modules object instances, Python classes.","code":"Mike$get_email() |> class() #> [1] \"python.builtin.str\"    \"python.builtin.object\"  py_convert_on(Mike) Mike$get_email() |> class() #> [1] \"character\"  py_convert_off(Mike) Mike$get_email() |> class() #> [1] \"python.builtin.str\"    \"python.builtin.object\""},{"path":"https://tengmcing.github.io/scrubwren/index.html","id":"id_3-call-the-superclass-initializer-with-py_super__init__-or-py_super_init","dir":"","previous_headings":"","what":"3. Call the superclass initializer with py_super()$`__init__()` or py_super_init()","title":"Specialized Collection of Reticulate Utilities: Better Wrappers for A Smoother Experience","text":"reticulate, formal documentation call superclass initializer defining __init__ via PyClass. Inspecting source reveals PyClass injects super() function environment class method. allows call superclass initializer super()$`__init__`(). scrubwren package makes explicit re-exporting super() py_super() providing convenient wrapper py_super_init() py_super()$`__init__()`.","code":"Salary <- py_class(\"Salary\", inherit = Employee, convert = FALSE,                    `__init__` = function(self, name, id, salary) {                      py_super_init(name, id)                      self$salary <- salary                      return(py_builtins$None)                    },                    get_salary_summary = function(self) {                      list(ID = self$id,                           Name = self$name,                           Email = self$get_email(),                           Salary = self$salary)                    })  Mike_salary <- Salary(\"Mike\", \"1234\", 1000) Mike_salary$get_salary_summary() #> {'ID': '1234', 'Name': 'Mike', 'Email': 'Mike_1234@company.com', 'Salary': 1000.0} Mike_salary$get_email() #> 'Mike_1234@company.com'"},{"path":"https://tengmcing.github.io/scrubwren/reference/get_scrubwren_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Access the internal scrubwren state — get_scrubwren_state","title":"Access the internal scrubwren state — get_scrubwren_state","text":"Returns hidden internal state object used scrubwren package managing temporary values (e.g., tuple unpacking helper operations).","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/get_scrubwren_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access the internal scrubwren state — get_scrubwren_state","text":"","code":"get_scrubwren_state()"},{"path":"https://tengmcing.github.io/scrubwren/reference/get_scrubwren_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access the internal scrubwren state — get_scrubwren_state","text":"environment containing internal package state.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/get_scrubwren_state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access the internal scrubwren state — get_scrubwren_state","text":"function exposes .scrubwren_state environment. primarily intended debugging advanced use, structure state object guaranteed remain stable across package versions.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/get_scrubwren_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access the internal scrubwren state — get_scrubwren_state","text":"","code":"if (FALSE) { # \\dontrun{ st <- get_scrubwren_state() ls(st)             # List objects in the internal state st$last_tuple_unpack_value  # Access the last unpacked tuple value } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_builtins.html","id":null,"dir":"Reference","previous_headings":"","what":"Access Python's built-in functions — py_builtins","title":"Access Python's built-in functions — py_builtins","text":"py_builtins provides access Python's standard built-functions (e.g., len, iter, isinstance, etc.).","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_builtins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access Python's built-in functions — py_builtins","text":"","code":"py_builtins"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_builtins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access Python's built-in functions — py_builtins","text":"object locked active binding assigned . lazily imported first access; Python ready, import fails. interactive sessions, informational message printed (can suppressed via options(scrubwren.show_py_builtins_message = FALSE)). built-ins Python objects; convert R objects reticulate::py_to_r().","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_builtins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access Python's built-in functions — py_builtins","text":"","code":"if (FALSE) { # \\dontrun{ # Suppress informational messages options(scrubwren.show_py_builtins_message = FALSE)  # Access Python's built-in `len` lst <- reticulate::r_to_py(list(1, 2, 3)) py_builtins$len(lst)  # returns 3  # Use Python's `isinstance` py_builtins$isinstance(lst, py_builtins$list)  } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Python class — py_class","title":"Create a Python class — py_class","text":"function works like reticulate::PyClass(), defs argument can now provided individual arguments (...) instead list.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Python class — py_class","text":"","code":"py_class(classname, ..., inherit = NULL, convert = FALSE)"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Python class — py_class","text":"classname Character. Name class. ... Functions, attributes, definitions class. inherit List. list Python class objects representing parent classes. convert Boolean. Whether automatically convert Python objects R.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Python class — py_class","text":"Python class object.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Python class — py_class","text":"original reticulate::PyClass() allow disabling automatic conversion Python objects R. function modifies function body enable functionality.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Python class — py_class","text":"","code":"if (FALSE) { # \\dontrun{ Employee <- py_class(\"Employee\",                      `__init__` = function(self, name, id) {                        self$name <- name                        self$id <- id                        return(invisible(NULL))                      },                      get_email = function(self) {                        paste0(self$name, \"_\", self$id, \"@company.com\")                      }) Mike <- Employee(\"Mike\", \"1234\") Mike$get_email() Mike$get_email() |> class() } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_convert_toggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggle automatic Python-to-R conversion — py_convert_toggle","title":"Toggle automatic Python-to-R conversion — py_convert_toggle","text":"functions control whether objects Python automatically converted R equivalents accessed reticulate.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_convert_toggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggle automatic Python-to-R conversion — py_convert_toggle","text":"","code":"py_convert_on(env)  py_convert_off(env)"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_convert_toggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggle automatic Python-to-R conversion — py_convert_toggle","text":"env Environment. Python object proxy returned reticulate. Must R environment representing Python object.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_convert_toggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Toggle automatic Python-to-R conversion — py_convert_toggle","text":"Invisibly returns env convert flag updated.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_convert_toggle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Toggle automatic Python-to-R conversion — py_convert_toggle","text":"py_convert_on() enables automatic conversion given Python object. py_convert_off() disables automatic conversion given Python object. env must Python object proxy (typically module, class instance, similar R environment created reticulate).","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_convert_toggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toggle automatic Python-to-R conversion — py_convert_toggle","text":"","code":"if (FALSE) { # \\dontrun{ # Assume `np` is a Python module (NumPy) np <- reticulate::import(\"numpy\", convert = FALSE)  # Turn conversion on py_convert_on(np) np$array(c(1,2,3)) |> class()  # returns R array  # Turn conversion off py_convert_off(np) np$array(c(1,2,3)) |> class()  # returns Python object } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_for.html","id":null,"dir":"Reference","previous_headings":"","what":"Python-style for loops in R — py_for","title":"Python-style for loops in R — py_for","text":"Executes Python-style loop R, iterating Python iterable iterator. provides convenient syntax looping destructuring (tuple unpacking) similar Python's statement.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_for.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Python-style for loops in R — py_for","text":"","code":"py_for(loop_spec, body, envir = parent.frame())"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_for.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Python-style for loops in R — py_for","text":"loop_spec two-sided formula form vars ~ iterable, vars specifies one loop variables (e.g. x c(, j)), iterable Python iterable iterator. body R expression evaluate iteration. envir environment run loop evaluate body. Defaults calling environment.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_for.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Python-style for loops in R — py_for","text":"Invisibly returns NULL. Called side effects.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_for.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Python-style for loops in R — py_for","text":"iterable implements __iter__ __next__, automatically converted iterator. Loop variables support tuple unpacking via py_tuple_unpack(). loop tracks whether user calls break next inside loop: break exits loop early, skipping remaining iterations. next skips next iteration without stopping loop entirely. neither called, loop proceeds normally.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_for.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Python-style for loops in R — py_for","text":"","code":"if (FALSE) { # \\dontrun{  # Basic loop over a Python list with loop control py_for(x ~ reticulate::r_to_py(list(1, 2, 3)), {   if (reticulate::py_to_r(x) == 2) next  # skip printing 2   if (reticulate::py_to_r(x) == 3) break # exit before printing 3   print(x) })  # Loop over a Python list py_for(x ~ reticulate::r_to_py(list(1, 2, 3)), {   print(x) })  # Loop with tuple unpacking pairs <- reticulate::tuple(list(list(1, \"a\"), list(2, \"b\")), convert = TRUE) py_for(c(i, j) ~ pairs, {   cat(\"i =\", i, \" j =\", j, \"\\n\") })  # Loop over a NumPy array np <- reticulate::import(\"numpy\", convert = FALSE) arr <- np$array(c(10, 20, 30)) py_for(val ~ arr, {   print(val) }) } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Explicitly initialize a Python session — py_init","title":"Explicitly initialize a Python session — py_init","text":"function explicitly initializes Python session current R session. single R session can bound one Python session. initialized, Python configuration fixed duration R session.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explicitly initialize a Python session — py_init","text":"","code":"py_init(python_path = reticulate::py_discover_config()$python, quiet = FALSE)"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explicitly initialize a Python session — py_init","text":"python_path Character. Path Python executable use. Defaults python element returned reticulate::py_discover_config().","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explicitly initialize a Python session — py_init","text":"invisible Python configuration object, returned reticulate::py_config().","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explicitly initialize a Python session — py_init","text":"Python already initialized, warning issued existing configuration returned. Otherwise, specified Python executable used start new session.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explicitly initialize a Python session — py_init","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize Python using the default discovery py_init() } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_iterable_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a Python object is iterable or an iterator — py_iterable_check","title":"Test whether a Python object is iterable or an iterator — py_iterable_check","text":"functions check iteration protocol Python object accessed R reticulate.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_iterable_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a Python object is iterable or an iterator — py_iterable_check","text":"","code":"py_is_iterable(obj)  py_is_iterator(obj)"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_iterable_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a Python object is iterable or an iterator — py_iterable_check","text":"obj Python object proxy.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_iterable_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether a Python object is iterable or an iterator — py_iterable_check","text":"Boolean scalar (TRUE FALSE).","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_iterable_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test whether a Python object is iterable or an iterator — py_iterable_check","text":"py_is_iterable() returns TRUE object can return iterator via Python's iter() function, otherwise FALSE. py_is_iterator() returns TRUE object iterator, .e. instance collections.abc.Iterator.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/scrubwren/reference/py_iterable_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether a Python object is iterable or an iterator — py_iterable_check","text":"","code":"if (FALSE) { # \\dontrun{ np <- reticulate::import(\"numpy\", convert = FALSE)  # A Python list is iterable but not an iterator lst <- reticulate::r_to_py(list(1, 2, 3)) py_is_iterable(lst)   # TRUE py_is_iterator(lst)   # FALSE  # An iterator (e.g., from iter()) is both iterable and an iterator it <- py_builtins$iter(lst) py_is_iterable(it)    # TRUE py_is_iterator(it)    # TRUE } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_super.html","id":null,"dir":"Reference","previous_headings":"","what":"Call Python's super() from R — py_super","title":"Call Python's super() from R — py_super","text":"functions provide access Python's built-super() mechanism within R, making easier work Python class inheritance defining classes via reticulate::PyClass() py_class().","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_super.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call Python's super() from R — py_super","text":"","code":"py_super()  py_super_init(...)"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_super.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call Python's super() from R — py_super","text":"... Arguments pass superclass initializer (py_super_init() ).","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_super.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call Python's super() from R — py_super","text":"py_super() returns Python object proxy superclass. py_super_init() returns NULL invisibly (reticulate::py_none() convert = FALSE), called side effects.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_super.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call Python's super() from R — py_super","text":"py_super() returns proxy superclass current object, equivalent Python's super(). py_super_init() directly calls superclass initializer, equivalent super().__init__(...). reticulate internally injects super() reference class methods, re-export makes functionality explicit convenient user code.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_super.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call Python's super() from R — py_super","text":"","code":"if (FALSE) { # \\dontrun{ Employee <- py_class(   \"Employee\",   `__init__` = function(self, name, id) {     self$name <- name     self$id <- id     return(py_builtins$None)   },   get_email = function(self) {     paste0(self$name, \"_\", self$id, \"@company.com\")   } )  Salary <- py_class(   \"Salary\", inherit = Employee,   `__init__` = function(self, name, id, salary) {     # Option A: use py_super()     py_super()$`__init__`(name, id)      # Option B: use py_super_init()     # py_super_init(name, id)      self$salary <- salary     return(py_builtins$None)   },   get_summary = function(self) {     list(ID = self$id,          Name = self$name,          Email = self$get_email(),          Salary = self$salary)   } )  mike <- Salary(\"Mike\", \"1234\", 1000) mike$get_summary() } # }"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_tuple_unpack.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack a Python tuple (or sequence) into R variables — py_tuple_unpack","title":"Unpack a Python tuple (or sequence) into R variables — py_tuple_unpack","text":"function unpacks elements Python tuple (sequence-like object) R variables, similar tuple unpacking Python (, b = (1, 2)).","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_tuple_unpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack a Python tuple (or sequence) into R variables — py_tuple_unpack","text":"","code":"py_tuple_unpack(vars, value, envir = parent.frame(), quote_vars = TRUE)"},{"path":"https://tengmcing.github.io/scrubwren/reference/py_tuple_unpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack a Python tuple (or sequence) into R variables — py_tuple_unpack","text":"vars symbol call like c(, b, c) representing variables assign . value Python object (tuple, list, etc.) R vector/list unpack. envir Environment. Environment assign unpacked values. Defaults calling environment. quote_vars Boolean. TRUE, vars captured unevaluated (recommended writing c(, b, c) directly).","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_tuple_unpack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack a Python tuple (or sequence) into R variables — py_tuple_unpack","text":"Invisibly returns NULL. Called side effects.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_tuple_unpack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unpack a Python tuple (or sequence) into R variables — py_tuple_unpack","text":"vars vector names created c(...), element value assigned corresponding variable calling environment. Nested unpacking supported recursively. number elements value exceeds number variables provided, warning issued unpacking proceeds available variables.","code":""},{"path":"https://tengmcing.github.io/scrubwren/reference/py_tuple_unpack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack a Python tuple (or sequence) into R variables — py_tuple_unpack","text":"","code":"if (FALSE) { # \\dontrun{ # Simple unpacking py_tuple_unpack(c(a, b), list(1, 2)) a  # 1 b  # 2  # With nested unpacking py_tuple_unpack(c(a, c(b, d)), list(1, list(2, 3))) a  # 1 b  # 2 d  # 3  # Works with Python tuples/lists tup <- reticulate::tuple(list(10, list(20, 30))) py_tuple_unpack(c(x, c(y, z)), tup) x  # 10 y  # 20 z  # 30 } # }"}]
